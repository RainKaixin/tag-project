// Ë∞ÉËØïÊï∞ÊçÆÊåÅ‰πÖÂåñÈóÆÈ¢ò
// Âú®È°πÁõÆËØ¶ÊÉÖÈ°µÈù¢ÁöÑÊéßÂà∂Âè∞‰∏≠ËøêË°å

console.log('üîç Debugging data persistence...');

// Ê£ÄÊü• localStorage ‰∏≠ÁöÑÂçè‰ΩúÊï∞ÊçÆ
const stored = localStorage.getItem('mock_collaborations');
console.log('üì¶ Raw stored data:', stored ? 'Found' : 'Not found');

if (stored) {
  const collaborations = JSON.parse(stored);
  console.log('üìã Total collaborations:', collaborations.length);

  collaborations.forEach((collab, index) => {
    console.log(`\n${index + 1}. ${collab.title} (ID: ${collab.id}):`);
    console.log(`   Roles:`, collab.roles);
    console.log(`   Roles count:`, collab.roles?.length || 0);

    if (collab.roles && collab.roles.length > 0) {
      collab.roles.forEach((role, roleIndex) => {
        console.log(`     Role ${roleIndex + 1}:`);
        console.log(`       Title:`, role.title || role.customRole);
        console.log(
          `       Description:`,
          role.description || role.roleDescription
        );
        console.log(`       Required Skills:`, role.requiredSkills);
        console.log(`       Status:`, role.status);
      });
    } else {
      console.log(`   ‚ùå No roles found`);
    }
  });

  // Ê£ÄÊü•ÂΩìÂâçÈ°µÈù¢ÁöÑÈ°πÁõÆÊï∞ÊçÆ
  console.log('\nüîç Current page project data:');

  // Â∞ùËØï‰ªéÈ°µÈù¢Ëé∑ÂèñÈ°πÁõÆÊï∞ÊçÆ
  const projectData =
    window.location.state?.project ||
    window.location.state?.collaboration ||
    window.location.state?.projectData;

  if (projectData) {
    console.log('üìÑ Project data from location state:', projectData);
    console.log('üë• Roles from location state:', projectData.roles);
  } else {
    console.log('‚ùå No project data found in location state');
  }

  // Ê£ÄÊü• URL ÂèÇÊï∞
  const urlParams = new URLSearchParams(window.location.search);
  const pathSegments = window.location.pathname.split('/');
  const idFromUrl = pathSegments[pathSegments.length - 1];
  console.log('\nüîó URL Analysis:');
  console.log('   Path segments:', pathSegments);
  console.log('   ID from URL:', idFromUrl);
  console.log('   URL params:', Object.fromEntries(urlParams));

  // ÊµãËØï getCollaborationDataById ÂáΩÊï∞
  console.log('\nüß™ Testing getCollaborationDataById:');

  // Ê®°Êãü getCollaborationDataById ÂáΩÊï∞
  const testGetCollaborationDataById = itemId => {
    try {
      console.log(`   Looking for itemId: ${itemId}`);

      const stored = localStorage.getItem('mock_collaborations');
      if (stored) {
        const collaborations = JSON.parse(stored);
        console.log(`   Found ${collaborations.length} collaborations`);

        const collaboration = collaborations.find(
          collab => collab.id === itemId
        );
        if (collaboration) {
          console.log(`   ‚úÖ Found collaboration:`, collaboration.title);
          console.log(`   Roles:`, collaboration.roles);
          return collaboration;
        } else {
          console.log(`   ‚ùå No collaboration found with id: ${itemId}`);
          console.log(
            `   Available IDs:`,
            collaborations.map(c => c.id)
          );

          // Â∞ùËØïÊü•ÊâæÊúÄÊñ∞ÁöÑÂçè‰ΩúÈ°πÁõÆ
          if (collaborations.length > 0) {
            const latestCollaboration = collaborations[0];
            console.log(
              `   üîÑ Using latest collaboration as fallback:`,
              latestCollaboration.title
            );
            return latestCollaboration;
          }
        }
      } else {
        console.log(`   ‚ùå No data in localStorage`);
      }
      return null;
    } catch (error) {
      console.error(`   ‚ùå Error:`, error);
      return null;
    }
  };

  // ÊµãËØï‰∏çÂêåÁöÑ ID Ê†ºÂºè
  const testIds = [idFromUrl, parseInt(idFromUrl), idFromUrl.toString()];
  testIds.forEach(testId => {
    console.log(`\n   Testing ID: ${testId} (type: ${typeof testId})`);
    const result = testGetCollaborationDataById(testId);
    if (result) {
      console.log(`   ‚úÖ Success with ID: ${testId}`);
    } else {
      console.log(`   ‚ùå Failed with ID: ${testId}`);
    }
  });

  // Ê£ÄÊü•È°µÈù¢‰∏äÁöÑËÅå‰ΩçÊï∞ÊçÆ
  setTimeout(() => {
    console.log('\nüîç Checking page elements...');

    // Êü•Êâæ Open Positions ÂÖÉÁ¥†
    const openPositions = document.querySelector('[class*="Open Positions"]');
    if (openPositions) {
      console.log('üìã Found Open Positions element:', openPositions);

      // Êü•ÊâæËÅå‰ΩçÂç°Áâá
      const positionCards = openPositions.querySelectorAll(
        '[class*="card"], [class*="position"]'
      );
      console.log('üéØ Position cards found:', positionCards.length);

      positionCards.forEach((card, index) => {
        console.log(
          `   Position ${index + 1}:`,
          card.textContent?.substring(0, 100) + '...'
        );
      });
    } else {
      console.log('‚ùå No Open Positions element found');
    }
  }, 1000);
} else {
  console.log('‚ùå No collaborations found in localStorage');
}

console.log('‚úÖ Debug completed!');
