// Áõ¥Êé•Âú®ÊµèËßàÂô®ÊéßÂà∂Âè∞ËøêË°åËøô‰∏™ËÑöÊú¨
// Â§çÂà∂Á≤òË¥¥Âà∞ÊµèËßàÂô®ÊéßÂà∂Âè∞ (F12 -> Console)

console.log('üîç Debugging description display issue...');

// Ê£ÄÊü• localStorage ‰∏≠ÁöÑÂçè‰ΩúÊï∞ÊçÆ
const stored = localStorage.getItem('mock_collaborations');
console.log('üì¶ Raw stored data:', stored ? 'Found' : 'Not found');

if (stored) {
  const collaborations = JSON.parse(stored);
  console.log('üìã Total collaborations:', collaborations.length);

  // Ê£ÄÊü•ÊØè‰∏™Âçè‰ΩúÈ°πÁõÆÁöÑ description Â≠óÊÆµ
  collaborations.forEach((collab, index) => {
    console.log(`\n${index + 1}. ${collab.title}:`);
    console.log(`   Description: "${collab.description}"`);
    console.log(`   Description length: ${collab.description?.length || 0}`);
    console.log(`   Description type: ${typeof collab.description}`);
    console.log(`   Has description: ${!!collab.description}`);
  });

  // Ê®°Êãü TAGMe È°µÈù¢ÁöÑÊï∞ÊçÆËΩ¨Êç¢
  console.log('\nüîç Simulating TAGMe data conversion...');

  // Ê®°Êãü formatAPIDataForList
  const formatAPIDataForList = apiDataList => {
    return apiDataList.map(item => ({
      id: item.id,
      title: item.title,
      subtitle: item.description,
      description: item.description, // Ê∑ªÂä† description Â≠óÊÆµ
      projectVision: item.projectVision,
      whyThisMatters: item.whyThisMatters,
      image: item.heroImage || null,
      posterPreview: item.posterPreview || item.heroImage || null,
      categories: item.projectType ? [item.projectType] : [],
      author: {
        id: item.author?.id || null,
        name: item.author?.name || 'Unknown',
        avatar: item.author?.avatar || null,
      },
      likes: item.likes || 0,
      views: item.views || 0,
      isLiked: false,
      isBookmarked: false,
      isInitiator: false,
      role: item.author?.role || 'Initiator',
      duration: item.duration || '',
      meetingSchedule: item.meetingSchedule || '',
      applicationDeadline: item.applicationDeadline || '',
      status: item.status === 'active' ? 'Open for Collaboration' : 'Closed',
      skills: item.roles?.map(role => role.title) || [],
      teamSize: item.teamSize || '',
      currentMembers: 0,
    }));
  };

  // Á≠õÈÄâ active Áä∂ÊÄÅÁöÑÂçè‰ΩúÈ°πÁõÆ
  const activeCollaborations = collaborations.filter(
    c => c.status === 'active'
  );
  console.log('üîç Active collaborations:', activeCollaborations.length);

  // Ê†ºÂºèÂåñÁÇ∫ÂàóË°®Ê†ºÂºè
  const formattedCollaborations = formatAPIDataForList(activeCollaborations);

  console.log('üìÑ Final formatted collaborations:');
  formattedCollaborations.forEach((collab, index) => {
    console.log(`\n${index + 1}. ${collab.title}:`);
    console.log(`   Description: "${collab.description}"`);
    console.log(`   Description length: ${collab.description?.length || 0}`);
    console.log(`   Has description: ${!!collab.description}`);
  });
} else {
  console.log('‚ùå No collaborations found in localStorage');
}

console.log('‚úÖ Debug completed!');
