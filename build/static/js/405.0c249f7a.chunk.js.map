{"version":3,"file":"static/js/405.0c249f7a.chunk.js","mappings":"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","sources":["services/supabase/userProfileService.js"],"sourcesContent":["import { supabase } from './client.js';\r\n\r\n/**\r\n * Supabase用户档案服务\r\n * 提供与Mock API相同的接口，确保前端组件无需修改\r\n */\r\n\r\n// 从Supabase profiles表读取用户档案\r\nexport const getProfile = async userId => {\r\n  try {\r\n    console.log(`[Supabase Profile] Getting profile for user: ${userId}`);\r\n\r\n    // 检查是否为Mock用户ID（非UUID格式）\r\n    const isMockUserId = !isValidUUID(userId);\r\n    \r\n    if (isMockUserId) {\r\n      console.log(`[Supabase Profile] Mock user ID detected: ${userId}, returning default profile`);\r\n      return {\r\n        success: true,\r\n        data: getDefaultProfile(userId),\r\n      };\r\n    }\r\n\r\n    const { data, error } = await supabase\r\n      .from('profiles')\r\n      .select('*')\r\n      .eq('id', userId)\r\n      .single();\r\n\r\n    if (error) {\r\n      if (error.code === 'PGRST116') {\r\n        // 用户档案不存在，返回默认档案\r\n        console.log(\r\n          `[Supabase Profile] Profile not found for user: ${userId}, returning default`\r\n        );\r\n        return {\r\n          success: true,\r\n          data: getDefaultProfile(userId),\r\n        };\r\n      }\r\n      throw error;\r\n    }\r\n\r\n    // 转换数据格式以匹配Mock API\r\n    const adaptedProfile = adaptSupabaseProfile(data);\r\n\r\n    console.log(\r\n      `[Supabase Profile] Successfully retrieved profile for user: ${userId}`\r\n    );\r\n\r\n    return {\r\n      success: true,\r\n      data: adaptedProfile,\r\n    };\r\n  } catch (error) {\r\n    console.error(\r\n      `[Supabase Profile] Error getting profile for user ${userId}:`,\r\n      error\r\n    );\r\n    return {\r\n      success: false,\r\n      error: error.message,\r\n    };\r\n  }\r\n};\r\n\r\n// 保存用户档案到Supabase\r\nexport const saveProfile = async (userId, profileData) => {\r\n  try {\r\n    console.log(`[Supabase Profile] Saving profile for user: ${userId}`);\r\n\r\n    // 检查是否为Mock用户ID（非UUID格式）\r\n    const isMockUserId = !isValidUUID(userId);\r\n    \r\n    if (isMockUserId) {\r\n      console.log(`[Supabase Profile] Mock user ID detected: ${userId}, cannot save to Supabase`);\r\n      return {\r\n        success: false,\r\n        error: 'Mock user ID cannot be saved to Supabase',\r\n      };\r\n    }\r\n\r\n    // 转换数据格式以匹配Supabase表结构\r\n    const supabaseData = adaptToSupabaseFormat(profileData);\r\n\r\n    const { data, error } = await supabase\r\n      .from('profiles')\r\n      .upsert(\r\n        {\r\n          id: userId,\r\n          ...supabaseData,\r\n        },\r\n        {\r\n          onConflict: 'id',\r\n        }\r\n      )\r\n      .select()\r\n      .single();\r\n\r\n    if (error) throw error;\r\n\r\n    console.log(\r\n      `[Supabase Profile] Successfully saved profile for user: ${userId}`\r\n    );\r\n\r\n    return {\r\n      success: true,\r\n      data: adaptSupabaseProfile(data),\r\n    };\r\n  } catch (error) {\r\n    console.error(\r\n      `[Supabase Profile] Error saving profile for user ${userId}:`,\r\n      error\r\n    );\r\n    return {\r\n      success: false,\r\n      error: error.message,\r\n    };\r\n  }\r\n};\r\n\r\n// 数据格式转换：Supabase → Mock API格式\r\nconst adaptSupabaseProfile = supabaseData => {\r\n  if (!supabaseData) return null;\r\n\r\n  return {\r\n    id: supabaseData.id,\r\n    fullName: supabaseData.full_name || '',\r\n    title: supabaseData.title || 'Artist',\r\n    school: supabaseData.school || '',\r\n    pronouns: supabaseData.pronouns || '',\r\n    majors: Array.isArray(supabaseData.majors) ? supabaseData.majors : [],\r\n    minors: Array.isArray(supabaseData.minors) ? supabaseData.minors : [],\r\n    skills: Array.isArray(supabaseData.skills) ? supabaseData.skills : [],\r\n    bio: supabaseData.bio || '',\r\n    socialLinks: {\r\n      instagram: supabaseData.social_links?.instagram || '',\r\n      portfolio: supabaseData.social_links?.portfolio || '',\r\n      discord: supabaseData.social_links?.discord || '',\r\n      otherLinks: Array.isArray(supabaseData.social_links?.otherLinks)\r\n        ? supabaseData.social_links.otherLinks\r\n        : [],\r\n    },\r\n    avatar: supabaseData.avatar_url || '',\r\n    createdAt: supabaseData.created_at,\r\n    updatedAt: supabaseData.updated_at,\r\n  };\r\n};\r\n\r\n// 数据格式转换：Mock API格式 → Supabase格式\r\nconst adaptToSupabaseFormat = mockData => {\r\n  return {\r\n    full_name: mockData.fullName || '',\r\n    title: mockData.title || 'Artist',\r\n    school: mockData.school || '',\r\n    pronouns: mockData.pronouns || '',\r\n    majors: Array.isArray(mockData.majors) ? mockData.majors : [],\r\n    minors: Array.isArray(mockData.minors) ? mockData.minors : [],\r\n    skills: Array.isArray(mockData.skills) ? mockData.skills : [],\r\n    bio: mockData.bio || '',\r\n    social_links: {\r\n      instagram: mockData.socialLinks?.instagram || '',\r\n      portfolio: mockData.socialLinks?.portfolio || '',\r\n      discord: mockData.socialLinks?.discord || '',\r\n      otherLinks: Array.isArray(mockData.socialLinks?.otherLinks)\r\n        ? mockData.socialLinks.otherLinks\r\n        : [],\r\n    },\r\n    avatar_url: mockData.avatar || '',\r\n  };\r\n};\r\n\r\n// 获取默认档案（当用户档案不存在时）\r\nconst getDefaultProfile = userId => {\r\n  return {\r\n    id: userId,\r\n    fullName: '',\r\n    title: 'Artist',\r\n    school: '',\r\n    pronouns: '',\r\n    majors: [],\r\n    minors: [],\r\n    skills: [],\r\n    bio: '',\r\n    socialLinks: {\r\n      instagram: '',\r\n      portfolio: '',\r\n      discord: '',\r\n      otherLinks: [],\r\n    },\r\n    avatar: '',\r\n    createdAt: new Date().toISOString(),\r\n    updatedAt: new Date().toISOString(),\r\n  };\r\n};\r\n\r\n// 检查Supabase连接状态\r\nexport const checkSupabaseConnection = async () => {\r\n  try {\r\n    const { data, error } = await supabase\r\n      .from('profiles')\r\n      .select('id')\r\n      .limit(1);\r\n\r\n    if (error) throw error;\r\n\r\n    return true;\r\n  } catch (error) {\r\n    console.warn('[Supabase Profile] Connection check failed:', error.message);\r\n    return false;\r\n  }\r\n};\r\n\r\n// UUID格式验证函数\r\nconst isValidUUID = (str) => {\r\n  const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;\r\n  return uuidRegex.test(str);\r\n};\r\n"],"names":["getProfile","async","console","log","concat","userId","isValidUUID","success","data","getDefaultProfile","error","supabase","from","select","eq","single","code","adaptedProfile","adaptSupabaseProfile","message","saveProfile","profileData","supabaseData","adaptToSupabaseFormat","upsert","_objectSpread","id","onConflict","_supabaseData$social_","_supabaseData$social_2","_supabaseData$social_3","_supabaseData$social_4","fullName","full_name","title","school","pronouns","majors","Array","isArray","minors","skills","bio","socialLinks","instagram","social_links","portfolio","discord","otherLinks","avatar","avatar_url","createdAt","created_at","updatedAt","updated_at","mockData","_mockData$socialLinks","_mockData$socialLinks2","_mockData$socialLinks3","_mockData$socialLinks4","Date","toISOString","checkSupabaseConnection","limit","warn","str","test"],"sourceRoot":""}