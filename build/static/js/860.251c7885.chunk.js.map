{"version":3,"file":"static/js/860.251c7885.chunk.js","mappings":"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","sources":["services/mock/followService.js"],"sourcesContent":["// mock-follow-service v1: Mock模式关注服务\n\nimport { getArtistById } from '../../components/artist-profile/utils/artistHelpers.js';\nimport { MOCK_USERS, getUserInfo } from '../../utils/mockUsers.js';\n\nconst STORAGE_KEY = 'tag_artist_follows';\n\n/**\n * 获取存储的关注数据\n */\nconst getStoredFollowData = () => {\n  try {\n    const data = localStorage.getItem(STORAGE_KEY);\n    return data ? JSON.parse(data) : {};\n  } catch (error) {\n    console.warn('Failed to get stored follow data:', error);\n    return {};\n  }\n};\n\n/**\n * 保存关注数据\n */\nconst saveFollowData = data => {\n  try {\n    localStorage.setItem(STORAGE_KEY, JSON.stringify(data));\n  } catch (error) {\n    console.warn('Failed to save follow data:', error);\n  }\n};\n\n/**\n * 初始化关注关系基线（如果不存在）\n */\nconst initializeFollowBaseline = () => {\n  const followData = getStoredFollowData();\n\n  // 如果已经有数据，不重复初始化\n  if (Object.keys(followData).length > 0) {\n    return;\n  }\n\n  // 预设关注关系基线\n  const baselineData = {\n    bryan: {\n      followers: ['alice', 'alex'], // bryan 被 alice 和 alex 关注\n      followersCount: 2,\n    },\n    alice: {\n      followers: ['bryan'], // alice 被 bryan 关注\n      followersCount: 1,\n    },\n    alex: {\n      followers: [], // alex 没有被任何人关注\n      followersCount: 0,\n    },\n  };\n\n  saveFollowData(baselineData);\n  console.log('[MockFollow] Initialized follow baseline data');\n};\n\n/**\n * 切换关注状态\n * @param {string} followerId - 关注者ID\n * @param {string} artistId - 被关注艺术家ID\n * @returns {Object} 结果对象\n */\nexport const toggleFollow = async (followerId, artistId) => {\n  try {\n    if (!followerId || !artistId) {\n      return {\n        success: false,\n        error: 'Missing followerId or artistId',\n      };\n    }\n\n    // 不能关注自己\n    if (followerId === artistId) {\n      return {\n        success: false,\n        error: 'Cannot follow yourself',\n      };\n    }\n\n    // 验证用户是否存在\n    if (!MOCK_USERS[followerId] || !MOCK_USERS[artistId]) {\n      return {\n        success: false,\n        error: 'User not found',\n      };\n    }\n\n    // 获取当前关注数据\n    const followData = getStoredFollowData();\n\n    // 初始化艺术家记录\n    if (!followData[artistId]) {\n      followData[artistId] = {\n        followers: [],\n        followersCount: 0,\n      };\n    }\n\n    const artistFollows = followData[artistId];\n    const followerIndex = artistFollows.followers.indexOf(followerId);\n    let isFollowing = false;\n\n    if (followerIndex === -1) {\n      // 用户未关注，添加关注\n      artistFollows.followers.push(followerId);\n      artistFollows.followersCount++;\n      isFollowing = true;\n      console.log(\n        `[MockFollow] User ${followerId} followed artist ${artistId}`\n      );\n    } else {\n      // 用户已关注，取消关注\n      artistFollows.followers.splice(followerIndex, 1);\n      artistFollows.followersCount--;\n      isFollowing = false;\n      console.log(\n        `[MockFollow] User ${followerId} unfollowed artist ${artistId}`\n      );\n    }\n\n    // 保存数据\n    saveFollowData(followData);\n\n    console.log(\n      `[MockFollow] Artist ${artistId} followers count: ${artistFollows.followersCount}`\n    );\n\n    return {\n      success: true,\n      data: {\n        isFollowing,\n        followersCount: artistFollows.followersCount,\n      },\n    };\n  } catch (error) {\n    console.error('[MockFollow] Error toggling follow:', error);\n    return {\n      success: false,\n      error: error.message,\n    };\n  }\n};\n\n/**\n * 检查用户是否已关注艺术家\n * @param {string} followerId - 关注者ID\n * @param {string} artistId - 艺术家ID\n * @returns {Object} 结果对象\n */\nexport const checkFollowStatus = async (followerId, artistId) => {\n  try {\n    if (!followerId || !artistId) {\n      return {\n        success: false,\n        error: 'Missing followerId or artistId',\n      };\n    }\n\n    const followData = getStoredFollowData();\n    const artistFollows = followData[artistId];\n\n    if (!artistFollows) {\n      return {\n        success: true,\n        data: {\n          isFollowing: false,\n          followersCount: 0,\n        },\n      };\n    }\n\n    const isFollowing = artistFollows.followers.includes(followerId);\n\n    return {\n      success: true,\n      data: {\n        isFollowing,\n        followersCount: artistFollows.followersCount,\n      },\n    };\n  } catch (error) {\n    console.error('[MockFollow] Error checking follow status:', error);\n    return {\n      success: false,\n      error: error.message,\n    };\n  }\n};\n\n/**\n * 获取艺术家关注者数量\n * @param {string} artistId - 艺术家ID\n * @returns {Object} 结果对象\n */\nexport const getFollowersCount = async artistId => {\n  try {\n    if (!artistId) {\n      return {\n        success: false,\n        error: 'Missing artistId',\n      };\n    }\n\n    const followData = getStoredFollowData();\n    const artistFollows = followData[artistId];\n\n    return {\n      success: true,\n      data: {\n        followersCount: artistFollows ? artistFollows.followersCount : 0,\n      },\n    };\n  } catch (error) {\n    console.error('[MockFollow] Error getting followers count:', error);\n    return {\n      success: false,\n      error: error.message,\n    };\n  }\n};\n\n/**\n * 获取用户关注的艺术家列表\n * @param {string} userId - 用户ID\n * @returns {Object} 结果对象\n */\nexport const getFollowingList = async userId => {\n  try {\n    if (!userId) {\n      return {\n        success: false,\n        error: 'Missing userId',\n      };\n    }\n\n    const followData = getStoredFollowData();\n    const following = [];\n\n    Object.keys(followData).forEach(artistId => {\n      if (followData[artistId].followers.includes(userId)) {\n        following.push(artistId);\n      }\n    });\n\n    return {\n      success: true,\n      data: {\n        following,\n        followingCount: following.length,\n      },\n    };\n  } catch (error) {\n    console.error('[MockFollow] Error getting following list:', error);\n    return {\n      success: false,\n      error: error.message,\n    };\n  }\n};\n\n/**\n * 清除所有关注数据（用于测试）\n */\nexport const clearAllFollowData = () => {\n  try {\n    localStorage.removeItem(STORAGE_KEY);\n    console.log('[MockFollow] All follow data cleared');\n  } catch (error) {\n    console.warn('[MockFollow] Failed to clear follow data:', error);\n  }\n};\n\n/**\n * 获取所有关注统计（用于调试）\n */\nexport const getAllFollowStats = () => {\n  try {\n    const followData = getStoredFollowData();\n    const stats = {};\n\n    Object.keys(followData).forEach(artistId => {\n      const artistFollows = followData[artistId];\n      stats[artistId] = {\n        followersCount: artistFollows.followersCount,\n        uniqueFollowers: artistFollows.followers.length,\n        followerList: artistFollows.followers,\n      };\n    });\n\n    return stats;\n  } catch (error) {\n    console.error('[MockFollow] Error getting follow stats:', error);\n    return {};\n  }\n};\n\n/**\n * 调试函数：打印详细的关注信息\n */\nexport const debugFollowStats = artistId => {\n  try {\n    const followData = getStoredFollowData();\n    const artistFollows = followData[artistId];\n\n    if (!artistFollows) {\n      console.log(`[Debug] No follow data for artist: ${artistId}`);\n      return;\n    }\n\n    console.log(`[Debug] Follow stats for artist: ${artistId}`);\n    console.log(`  Followers count: ${artistFollows.followersCount}`);\n    console.log(`  Followers: ${artistFollows.followers.join(', ')}`);\n\n    return artistFollows;\n  } catch (error) {\n    console.error('[Debug] Error getting follow stats:', error);\n  }\n};\n\n/**\n * 生成 cursor 用于分页\n * @param {number} index - 索引\n * @returns {string} cursor\n */\nconst generateCursor = index => {\n  return btoa(`cursor_${index}`).replace(/=/g, '');\n};\n\n/**\n * 解析 cursor 获取索引\n * @param {string} cursor - cursor字符串\n * @returns {number} 索引\n */\nconst parseCursor = cursor => {\n  try {\n    const decoded = atob(cursor);\n    const match = decoded.match(/cursor_(\\d+)/);\n    return match ? parseInt(match[1]) : 0;\n  } catch {\n    return 0;\n  }\n};\n\n/**\n * 搜索用户数据\n * @param {Array} userIds - 用户ID数组\n * @param {string} query - 搜索关键词\n * @returns {Array} 过滤后的用户ID数组\n */\nconst searchUsers = (userIds, query) => {\n  if (!query.trim()) return userIds;\n\n  const searchTerm = query.toLowerCase();\n  return userIds.filter(userId => {\n    const user = MOCK_USERS[userId];\n    if (!user) return false;\n\n    // 搜索姓名、学校、技能\n    const searchableText = [\n      user.displayName,\n      user.name,\n      user.school,\n      ...(user.skills || []),\n      ...(user.majors || []),\n    ]\n      .join(' ')\n      .toLowerCase();\n\n    return searchableText.includes(searchTerm);\n  });\n};\n\n/**\n * 获取艺术家关注者列表（支持分页和搜索）\n * @param {string} artistId - 艺术家ID\n * @param {Object} options - 选项\n * @param {number} options.limit - 每页数量，默认20\n * @param {string} options.cursor - 分页游标\n * @param {string} options.q - 搜索关键词\n * @returns {Object} 结果对象\n */\nexport const getFollowersList = async (\n  artistId,\n  { limit = 20, cursor = null, q = '', currentUserId = 'alice' } = {}\n) => {\n  try {\n    if (!artistId) {\n      return {\n        success: false,\n        error: 'Missing artistId',\n      };\n    }\n\n    // 初始化基线数据\n    initializeFollowBaseline();\n\n    const followData = getStoredFollowData();\n    const artistFollows = followData[artistId];\n\n    if (!artistFollows || !artistFollows.followers.length) {\n      return {\n        success: true,\n        data: {\n          items: [],\n          hasMore: false,\n          cursor: null,\n        },\n      };\n    }\n\n    // 获取所有关注者ID\n    let followerIds = [...artistFollows.followers];\n\n    // 应用搜索过滤\n    if (q.trim()) {\n      followerIds = searchUsers(followerIds, q);\n    }\n\n    // 应用分页\n    const startIndex = cursor ? parseCursor(cursor) : 0;\n    const endIndex = startIndex + limit;\n    const paginatedIds = followerIds.slice(startIndex, endIndex);\n\n    // 获取用户详细信息\n    const items = await Promise.all(\n      paginatedIds.map(async followerId => {\n        // 使用getArtistById获取完整的用户数据，包括正确的头像\n        const artistData = await getArtistById(followerId);\n        if (!artistData) {\n          console.warn(`[MockFollow] Artist data not found: ${followerId}`);\n          return null;\n        }\n\n        // 检查当前用户是否关注了这个用户\n        const isFollowedByMe =\n          followData[followerId]?.followers.includes(currentUserId) || false;\n\n        return {\n          id: artistData.id,\n          displayName: artistData.name, // 使用name字段作为displayName\n          avatar: artistData.avatar, // 使用处理过的头像\n          role: artistData.title || artistData.discipline, // 使用title或discipline字段\n          school: artistData.school,\n          skills: artistData.skills || [],\n          isFollowedByMe: isFollowedByMe,\n          isMutual: false, // 需要检查是否互相关注\n        };\n      })\n    );\n\n    // 过滤掉null值\n    const validItems = items.filter(Boolean);\n\n    const hasMore = endIndex < followerIds.length;\n    const nextCursor = hasMore ? generateCursor(endIndex) : null;\n\n    return {\n      success: true,\n      data: {\n        items: validItems,\n        hasMore,\n        cursor: nextCursor,\n      },\n    };\n  } catch (error) {\n    console.error('[MockFollow] Error getting followers list:', error);\n    return {\n      success: false,\n      error: error.message,\n    };\n  }\n};\n\n/**\n * 获取用户正在关注的艺术家列表（支持分页和搜索）\n * @param {string} userId - 用户ID\n * @param {Object} options - 选项\n * @param {number} options.limit - 每页数量，默认20\n * @param {string} options.cursor - 分页游标\n * @param {string} options.q - 搜索关键词\n * @returns {Object} 结果对象\n */\nexport const getFollowingListPaginated = async (\n  userId,\n  { limit = 20, cursor = null, q = '' } = {}\n) => {\n  try {\n    if (!userId) {\n      return {\n        success: false,\n        error: 'Missing userId',\n      };\n    }\n\n    // 初始化基线数据\n    initializeFollowBaseline();\n\n    const followData = getStoredFollowData();\n    const following = [];\n\n    // 找出用户关注的所有艺术家\n    Object.keys(followData).forEach(artistId => {\n      if (followData[artistId].followers.includes(userId)) {\n        following.push(artistId);\n      }\n    });\n\n    if (!following.length) {\n      return {\n        success: true,\n        data: {\n          items: [],\n          hasMore: false,\n          cursor: null,\n        },\n      };\n    }\n\n    // 应用搜索过滤\n    let filteredFollowing = following;\n    if (q.trim()) {\n      filteredFollowing = searchUsers(following, q);\n    }\n\n    // 应用分页\n    const startIndex = cursor ? parseCursor(cursor) : 0;\n    const endIndex = startIndex + limit;\n    const paginatedIds = filteredFollowing.slice(startIndex, endIndex);\n\n    // 获取艺术家详细信息\n    const items = await Promise.all(\n      paginatedIds.map(async artistId => {\n        // 使用getArtistById获取完整的用户数据，包括正确的头像\n        const artistData = await getArtistById(artistId);\n        if (!artistData) {\n          console.warn(`[MockFollow] Artist data not found: ${artistId}`);\n          return null;\n        }\n\n        return {\n          id: artistData.id,\n          displayName: artistData.name, // 使用name字段作为displayName\n          avatar: artistData.avatar, // 使用处理过的头像\n          role: artistData.title || artistData.discipline, // 使用title或discipline字段\n          school: artistData.school,\n          skills: artistData.skills || [],\n          isFollowedByMe: true, // 用户正在关注这个艺术家\n          isMutual: false, // 需要检查是否互相关注\n        };\n      })\n    );\n\n    // 过滤掉null值\n    const validItems = items.filter(Boolean);\n\n    const hasMore = endIndex < filteredFollowing.length;\n    const nextCursor = hasMore ? generateCursor(endIndex) : null;\n\n    return {\n      success: true,\n      data: {\n        items: validItems,\n        hasMore,\n        cursor: nextCursor,\n      },\n    };\n  } catch (error) {\n    console.error('[MockFollow] Error getting following list:', error);\n    return {\n      success: false,\n      error: error.message,\n    };\n  }\n};\n\n/**\n * 关注用户\n * @param {string} targetUserId - 目标用户ID\n * @param {string} currentUserId - 当前用户ID（可选，默认为 alice）\n * @returns {Object} 结果对象\n */\nexport const follow = async (targetUserId, currentUserId = 'alice') => {\n  const result = await toggleFollow(currentUserId, targetUserId);\n\n  if (result.success) {\n    // 触发事件通知其他组件\n    window.dispatchEvent(\n      new CustomEvent('follow:changed', {\n        detail: {\n          followerId: currentUserId,\n          artistId: targetUserId,\n          isFollowing: true,\n          operation: 'follow',\n        },\n      })\n    );\n  }\n\n  return result;\n};\n\n/**\n * 取消关注用户\n * @param {string} targetUserId - 目标用户ID\n * @param {string} currentUserId - 当前用户ID（可选，默认为 alice）\n * @returns {Object} 结果对象\n */\nexport const unfollow = async (targetUserId, currentUserId = 'alice') => {\n  const result = await toggleFollow(currentUserId, targetUserId);\n\n  if (result.success) {\n    // 触发事件通知其他组件\n    window.dispatchEvent(\n      new CustomEvent('follow:changed', {\n        detail: {\n          followerId: currentUserId,\n          artistId: targetUserId,\n          isFollowing: false,\n          operation: 'unfollow',\n        },\n      })\n    );\n  }\n\n  return result;\n};\n"],"names":["STORAGE_KEY","getStoredFollowData","data","localStorage","getItem","JSON","parse","error","console","warn","saveFollowData","setItem","stringify","initializeFollowBaseline","followData","Object","keys","length","bryan","followers","followersCount","alice","alex","log","toggleFollow","async","followerId","artistId","success","MOCK_USERS","artistFollows","followerIndex","indexOf","isFollowing","push","concat","splice","message","getFollowersCount","getFollowingList","userId","following","forEach","includes","followingCount","generateCursor","index","btoa","replace","parseCursor","cursor","match","atob","parseInt","_unused","searchUsers","userIds","query","trim","searchTerm","toLowerCase","filter","user","displayName","name","school","skills","majors","join","getFollowersList","limit","q","currentUserId","arguments","undefined","items","hasMore","followerIds","startIndex","endIndex","paginatedIds","slice","validItems","Promise","all","map","_followData$followerI","artistData","getArtistById","isFollowedByMe","id","avatar","role","title","discipline","isMutual","Boolean","getFollowingListPaginated","filteredFollowing","follow","targetUserId","result","window","dispatchEvent","CustomEvent","detail","operation","unfollow"],"sourceRoot":""}